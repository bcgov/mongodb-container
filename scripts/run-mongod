#!/bin/bash
# Copyright 2021 The Province of British Columbia
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# Copyright 2021 SCLORG
# Ref. https://github.com/sclorg/mongodb-container/LICENCE
#

set -euo pipefail

# Constants
readonly KEY_FILE=/var/lib/mongodb/keyfile
readonly MAX_ATTEMPTS=60
readonly SLEEP_TIME=1
readonly ROOT_AUTH_DB='admin'
# Fully Qualifed Nost Name
# ie. mongodb-0.mongodb-internal.abc123-prod.svc.cluster.local
readonly FQ_HOST_NAME="$(hostname -f)"

#
# functions
#

log() {
  TIMESTAMP=`date +"%F %T"`
  echo "$TIMESTAMP [run-mongod]: $@";
}

# function to use by extension scripts instead of mongo shell binary
# - to be able to change shell params in all scripts
# for example to use SSL certificate
mongo_cmd() {
  mongo --quiet $@;
}

mongosh_cmd() {
  mongosh $@;
}

# generate keyfile
gen_key_file() {
  echo ${MONGODB_KEYFILE_VALUE} >>${KEY_FILE}
  chmod 400 ${KEY_FILE}
}

start_mongod() {
  # Mongo suggest launching mongod with `numactl` to 
  # avoid performance problems on NUMA machines.
  numactl \
  --interleave=all \
  mongod \
  -f /etc/mongod.conf \
  --auth \
  --keyFile ${KEY_FILE} \
  --replSet ${MONGODB_REPLICA_NAME} &
}

start_mongod_local() {
  mongod \
  -f /etc/mongod.conf \
  --bind_ip localhost \
  --noauth &
}

stop_mongod() {

  # Options to shutdown mongodb can be found here:
  # Ref. https://docs.mongodb.com/manual/tutorial/manage-mongodb-processes/#std-label-terminate-mongod-processes

  mongod \
  -f /etc/mongod.conf \
  --shutdown
}

# wait_for_mongo_up waits until the mongo server accepts incomming connections
wait_for_mongo_up() {
  _wait_for_mongo 1
}

# wait_for_mongo_down waits until the mongo server is down
wait_for_mongo_down() {
  _wait_for_mongo 0
}

# wait_for_mongo waits until the mongo server is up/down
# $1 - 0 or 1 - to specify for what to wait (0 - down, 1 - up)
_wait_for_mongo() {
  local operation=${1:-1}
  local message="up"

  if [[ ${operation} -eq 0 ]]; then
    message="down"
  fi

  local i
  for i in $(seq $MAX_ATTEMPTS); do
    if ([[ ${operation} -eq 1 ]] && mongo_cmd localhost <<< "quit()" 2>&1 >/dev/null) || ([[ ${operation} -eq 0 ]] && ! mongo_cmd localhost <<< "quit()" 2>&1 >/dev/null); then
      log "mongoDB daemon is ${message}"
      return 0
    fi
    sleep ${SLEEP_TIME}
  done

  log "Giving up: MongoDB daemon is not ${message}!"
  return 1
}

run_replica_set_mgmt() {
  local FQDN=$1
  local SHORT_NAME=${FQDN%%.*}
  local DOMAIN_NAME=${FQDN#*.}

  # primary node: mongodb-0
  # secondaries:  mongodb-1+
  # ------------------------
  local PRIMARY=mongodb-0.$DOMAIN_NAME
  local HOST_NAME=$FQDN

  log "PRIMARY: ${PRIMARY}"
  log "Doing replica set configuration for $HOST_NAME"
  HOST_NAME=$HOST_NAME \
  mongosh_cmd --host $PRIMARY \
    -u $MONGODB_ADMIN_USERNAME -p $MONGODB_ADMIN_PASSWORD \
    -f /opt/scripts/config_replica_set.js
  log "Done replica set configuration"
}

# Run a JS startup script. These scripts are run agains the
# localhost **before** authentication is enabled so they;
# no user/passwd combination is requred.
run_js_script() {
  local file_name="$1"

  mongosh_cmd \
  --host localhost \
  -f ${file_name}
}

run_scripts_on_startup() {

  for f in /docker-entrypoint-initdb.d/*; do
    case "$f" in
      *.sh) log "$0: running $f"; . "$f" ;;
      *.js) log "$0: running $f"; run_js_script "$f"; echo ;;
      *)    log "$0: ignoring $f" ;;
    esac
    echo
  done
}

# Usage
usage() {
  cat <<-EOF
  You must specify the following environment variables:
  MONGODB_ADMIN_PASSWORD

  Replication is enabled by default and cannot be turned
  down, so you must also provide the following environment
  variables:
  MONGODB_KEYFILE_VALUE
  MONGODB_REPLICA_NAME

  Protip: Generate a keyfile value with:
  `openssl rand -base64 756`

  It is **highly recommended** you provide the following
  variables for an application user with the `readWrite` role.
  Specify all three or none, you cannot do some of them:
  MONGODB_USER
  MONGODB_PASSWORD
  MONGODB_DATABASE

EOF
exit
}

if [ -z "${MONGODB_ADMIN_PASSWORD}" ] || 
   [ -z "${MONGODB_KEYFILE_VALUE}" ] ||
   [ -z "${MONGODB_REPLICA_NAME}" ]; then
  echo -e \\n"Missing key parameters !!!"\\n
  usage
fi

#
# Do the real work
#

# Generate the keyfile used for securing the replicaset.
log "Generating the keyfile for replication."
gen_key_file

# Start mongodb on the localhost interface so that the
# admin password can be set.
start_mongod_local
wait_for_mongo_up

run_scripts_on_startup

# Stop mongodb.
stop_mongod
wait_for_mongo_down

# Start mongodb on all interfaces with the replica set
# enabled.
log "Starting the server for replication"
start_mongod
wait_for_mongo_up

touch /tmp/initialized

# Pause to allow hostname to get registered in DNS
sleep 30
run_replica_set_mgmt "${FQ_HOST_NAME}"


log "mongoDB is initalized and ready for action"

trap 'stop_mongod' SIGINT SIGTERM

wait $(pgrep --parent 1 mongod) && echo "Goodbye!"

